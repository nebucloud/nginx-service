// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: nginx/v1/nginx_config.proto

package nginx

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NginxConfigService_ApplyConfig_FullMethodName = "/nginxconfig.NginxConfigService/ApplyConfig"
	NginxConfigService_GetConfig_FullMethodName   = "/nginxconfig.NginxConfigService/GetConfig"
)

// NginxConfigServiceClient is the client API for NginxConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NginxConfigServiceClient interface {
	ApplyConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
}

type nginxConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNginxConfigServiceClient(cc grpc.ClientConnInterface) NginxConfigServiceClient {
	return &nginxConfigServiceClient{cc}
}

func (c *nginxConfigServiceClient) ApplyConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, NginxConfigService_ApplyConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nginxConfigServiceClient) GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, NginxConfigService_GetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NginxConfigServiceServer is the server API for NginxConfigService service.
// All implementations must embed UnimplementedNginxConfigServiceServer
// for forward compatibility
type NginxConfigServiceServer interface {
	ApplyConfig(context.Context, *ConfigRequest) (*ConfigResponse, error)
	GetConfig(context.Context, *ConfigRequest) (*ConfigResponse, error)
	mustEmbedUnimplementedNginxConfigServiceServer()
}

// UnimplementedNginxConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNginxConfigServiceServer struct {
}

func (UnimplementedNginxConfigServiceServer) ApplyConfig(context.Context, *ConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyConfig not implemented")
}
func (UnimplementedNginxConfigServiceServer) GetConfig(context.Context, *ConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedNginxConfigServiceServer) mustEmbedUnimplementedNginxConfigServiceServer() {}

// UnsafeNginxConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NginxConfigServiceServer will
// result in compilation errors.
type UnsafeNginxConfigServiceServer interface {
	mustEmbedUnimplementedNginxConfigServiceServer()
}

func RegisterNginxConfigServiceServer(s grpc.ServiceRegistrar, srv NginxConfigServiceServer) {
	s.RegisterService(&NginxConfigService_ServiceDesc, srv)
}

func _NginxConfigService_ApplyConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NginxConfigServiceServer).ApplyConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NginxConfigService_ApplyConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NginxConfigServiceServer).ApplyConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NginxConfigService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NginxConfigServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NginxConfigService_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NginxConfigServiceServer).GetConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NginxConfigService_ServiceDesc is the grpc.ServiceDesc for NginxConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NginxConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nginxconfig.NginxConfigService",
	HandlerType: (*NginxConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyConfig",
			Handler:    _NginxConfigService_ApplyConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _NginxConfigService_GetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nginx/v1/nginx_config.proto",
}
