package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	graphql1 "github.com/nebucloud/nginx-service/graphql"
	"github.com/nebucloud/nginx-service/graphql/model"
)

// Empty is the resolver for the _empty field.
func (r *mutationResolver) Empty(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: Empty - _empty"))
}

// UpdateNginxConfig is the resolver for the updateNginxConfig field.
func (r *mutationResolver) UpdateNginxConfig(ctx context.Context, id string, config model.NginxConfigInput) (*model.NginxConfig, error) {
	panic(fmt.Errorf("not implemented: UpdateNginxConfig - updateNginxConfig"))
}

// AddNginxConfig is the resolver for the addNginxConfig field.
func (r *mutationResolver) AddNginxConfig(ctx context.Context, config model.NginxConfigInput) (*model.NginxConfig, error) {
	panic(fmt.Errorf("not implemented: AddNginxConfig - addNginxConfig"))
}

// DeleteNginxConfig is the resolver for the deleteNginxConfig field.
func (r *mutationResolver) DeleteNginxConfig(ctx context.Context, id string) (*string, error) {
	panic(fmt.Errorf("not implemented: DeleteNginxConfig - deleteNginxConfig"))
}

// NginxConfig is the resolver for the nginxConfig field.
func (r *queryResolver) NginxConfig(ctx context.Context, id string) (*model.NginxConfig, error) {
	panic(fmt.Errorf("not implemented: NginxConfig - nginxConfig"))
}

// ListNginxConfigs is the resolver for the listNginxConfigs field.
func (r *queryResolver) ListNginxConfigs(ctx context.Context) ([]*model.NginxConfig, error) {
	panic(fmt.Errorf("not implemented: ListNginxConfigs - listNginxConfigs"))
}

// Mutation returns graphql1.MutationResolver implementation.
func (r *Resolver) Mutation() graphql1.MutationResolver { return &mutationResolver{r} }

// Query returns graphql1.QueryResolver implementation.
func (r *Resolver) Query() graphql1.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
